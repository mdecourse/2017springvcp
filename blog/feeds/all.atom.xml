<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 計算機程式 (虎尾科大VE)</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-04-14T11:00:00+08:00</updated><entry><title>W8 分組期中報告程式編寫與管理</title><link href="./w8-program-and-version-control.html" rel="alternate"></link><published>2017-04-14T11:00:00+08:00</published><updated>2017-04-14T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-04-14:./w8-program-and-version-control.html</id><summary type="html">&lt;p&gt;本週將分別以 C 及 Python 編寫 8 個基本的程式應用. 接著利用 各組的 Fossil SCM 倉儲進行管理.&lt;/p&gt;


&lt;h2&gt;程式一: 輸入圓半徑, 計算圓面積與圓周長&lt;/h2&gt;
&lt;p&gt;以 C 編寫:&lt;/p&gt;
&lt;pre class="brush: c"&gt;
// 程式 midterm_ex1.c
// 引入 stdio 標準輸出入標頭檔案
#include&amp;lt;stdio.h&amp;gt;

// 定義主函式
int main() {

 // 宣告變數
   int rad;
   float PI = 3.14, area, ci;

 // 格式化列印出提示字串後, 取使用者的半徑輸入
   printf("\nEnter radius of circle: ");
   scanf("%d", &amp;rad);

 // 根據使用者的半徑輸入, 計算圓面積
   area = PI * rad * rad;
   printf("\nArea of circle : %f ", area);

 // 計算圓周長度
   ci = 2 * PI * rad;
   printf("\nCircumference : %f ", ci);

 // 配合主函式的整數回傳資料型別, 傳回整數
   return (0);
}
&lt;/pre&gt;

&lt;p&gt;以 Python3 編寫:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 程式 midterm_ex1.py
import math
radius = float(input("請輸入圓半徑:"))
print("圓面積為:", math.pi*radius*radius)
print("圓周長為:", 2*math.pi*radius)
&lt;/pre&gt;

&lt;p&gt;接著在 SciTE 編輯器中執行無誤之後, 準備將上述兩個程式提交推送到倉儲.&lt;/p&gt;
&lt;h2&gt;假如近端沒有倉儲檔案&lt;/h2&gt;
&lt;h3&gt;以 clone 複製倉儲檔案&lt;/h3&gt;
&lt;p&gt;fossil clone https://account@server_ip_or_domain_name cloned.fossil&lt;/p&gt;
&lt;p&gt;fossil 要求輸入 account 對應的密碼&lt;/p&gt;
&lt;p&gt;將遠端自己擁有管理權限的 Fossil Server clone 到近端存為 cloned.fossil 檔案之後, 接著就是將此倉儲資料庫檔案在工作目錄中開啟, 因此在對應目錄下以 mkdir wd 建立 working directory 後, 以 cd wd 進入工作目錄, 然後下 fossil open 將此倉儲檔案的內容打開:&lt;/p&gt;
&lt;h3&gt;以 open 開啟倉儲檔案&lt;/h3&gt;
&lt;p&gt;fossil open ./../cloned.fossil&lt;/p&gt;
&lt;p&gt;之所以在 cloned.fossil 加入 ./../ 是因為這個先前複製下來的倉儲檔案位於目前所在目錄 wd 的上一個目錄中, 因此必須要指定是開啟位於上一個目錄中的 cloned.fossil, 並將此倉儲內容在 wd 目錄中打開.&lt;/p&gt;
&lt;p&gt;完成倉儲檔案在工作目錄的開啟之後, 假如是在 Windows 操作系統環境中, 該工作目錄中會有一個 &lt;em&gt;FOSSIL&lt;/em&gt; 檔案, 而若在 Ubuntu 操作系統環境中, 則會產生一個 .fslckout 檔案, 且 &lt;em&gt;FOSSIL&lt;/em&gt; 或 .fslckout 檔案為 SQLite 格式的資料庫檔案, 用來儲存 Fossil SCM 系統的各式改版註記資料.&lt;/p&gt;
&lt;h3&gt;在工作目錄中進行改版&lt;/h3&gt;
&lt;p&gt;在工作目錄中所進行的改版, 以文字檔案為主, 但也可以放入其他二位元檔案, 只是 Fossil SCM 中的二位元檔案無法像文字檔一樣, 在每次改版後, 明確列出各次改版內容的差異.&lt;/p&gt;
&lt;h3&gt;以 commit 指令進行提交&lt;/h3&gt;
&lt;p&gt;接著再進行改版後, 執行 fossil commit -m "改版註記訊息", 註記每次改版內容的字串, 主要用來簡要說明各次改版的內容, 之後使用者可以根據此提交註記訊息來辨識各版次的改版階段, 也能使用 checkout 指令, 將倉儲檔案回復到先前的特定版次狀態.&lt;/p&gt;
&lt;p&gt;最後, 因為前面採用特定用戶身份進行 fossil clone, 因此 fossil 會以內建的 autosync 設定為 on 的情況, 自動執行倉儲改版內容的推送.&lt;/p&gt;
&lt;h3&gt;基本算術題目&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Calculate Area and Circumference of Circle (計算圓面積與圓周長)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate Area of Scalene Triangle (計算不等邊三角形面積)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate Area of Equilatral Triangle (計算正三角形面積)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate Area of Right angle Triangle (計算直角三角形面積)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate Area of Rectangle (計算長方形面積)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;期中自評表&lt;/h3&gt;
&lt;p&gt;學生自評部份 (80%) +  各組 Fossil SCM 上的佐證紀錄 (20%)&lt;/p&gt;
&lt;p&gt;每週都準時上下課 (20 分)&lt;/p&gt;
&lt;p&gt;上面 5 個題目, 寫出對應的 C 與 Python 程式 (每一題 6 分)&lt;/p&gt;
&lt;p&gt;請各組員根據上述自評表, 在各組的 Fossil SCM 倉儲中完成期中報告與自評分數&lt;/p&gt;
&lt;h3&gt;線上 C 與 Python3 程式執行&lt;/h3&gt;
&lt;p&gt;C 程式：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/codelauncher"&gt;https://github.com/mdecourse/codelauncher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python3 程式:&lt;/p&gt;
&lt;p&gt;&lt;a href="web-based-python.html"&gt;網際 Python3 執行環境&lt;/a&gt;&lt;/p&gt;</summary><category term="Fossil"></category><category term="w8"></category></entry><entry><title>W5 利用 Fossil SCM 對 C 與 Python3 程式進行版次管理</title><link href="./fossil-scm-version-control.html" rel="alternate"></link><published>2017-03-25T11:00:00+08:00</published><updated>2017-03-25T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-25:./fossil-scm-version-control.html</id><summary type="html">&lt;p&gt;本週開始將利用 Fossil SCM 伺服器管理各組所寫的 C 與 Python3 程式. 課程中將使用 &lt;a href="http://service.mde.tw/public/jsliu_c_programming.pdf"&gt;C 程式設計語言基礎&lt;/a&gt; 研習 ANSI C 程式, 並採用 &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;Lean Python&lt;/a&gt; 研習 Python3 程式, 透過 &lt;a href="http://www.c4learn.com/c-programs/"&gt;http://www.c4learn.com/c-programs/&lt;/a&gt; 中的範例進行練習.&lt;/p&gt;


&lt;p&gt;首先, 從課本中找出, 以 C 程式, 利用 for 迴圈與格式化列印所完成的 99 乘法計算程式, 存為 99.c&lt;/p&gt;
&lt;pre class="brush: c"&gt;
/* ====================
99 multiplication table
==================== */
#include &lt;stdio.h&gt;
int main()
{
    int x, y;
    for( x = 1; x &lt;= 9; x++ )
    {
        for( y = 1; y &lt;= 9; y++ )
        {
            printf("%d", x*y );
        }
        printf("\n");
    }
    return 0;
}
&lt;/pre&gt;

&lt;p&gt;接下來以 Python3 編寫能夠執行相同功能的程式:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
for i in range(1, 10):
   for j in range(1, 10):
      print(i*j, end="")
   print()
&lt;/pre&gt;

&lt;p&gt;同時找出先前所寫的 hello.c 與 hello.py:&lt;/p&gt;
&lt;p&gt;hello.c:&lt;/p&gt;
&lt;pre class="brush: c"&gt;
/* ====================
 Say Hello World!.
==================== */
#include &lt;stdio.h&gt;
void main()
{
 /* 印出 Hello */
printf("Hello World!");
}
&lt;/pre&gt;

&lt;p&gt;hello.py:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
print("hello world")
&lt;/pre&gt;

&lt;p&gt;接下來我們將要先利用各學員近端的 Fossil SCM Server 練習如何對上述4個檔案進行版次管理:&lt;/p&gt;
&lt;h2&gt;Fossil SCM autosync on 改版&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;fossil clone https://username@192.168.1.68 vcp.fossil&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;輸入與 username 對應的密碼.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在工作目錄中開啟倉儲檔案.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil open vcp.fossil&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在倉儲對應的工作目錄中進行改版.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;納入所有的改版內容&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil add .&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提交, 並讓 Fossil SCM 自動完成推送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil commit -m "message"&lt;/p&gt;
&lt;h2&gt;Fossil SCM autosync off 改版&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;fossil clone https://192.168.1.68 vcp.fossil&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;輸入與 username 對應的密碼.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在工作目錄中開啟倉儲檔案.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil open vcp.fossil&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在倉儲對應的工作目錄中進行改版.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;納入所有的改版內容&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil add .&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;利用 fossil remote-url off 切斷內建的帳號綁定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交, 並以手動完成推送&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil commit -m "message"&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手動推送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;fossil push https://username@192.168.1.68&lt;/p&gt;
&lt;p&gt;輸入與 username 對應的密碼後完成推送, 並回應是否要將推送權限資料儲存在近端.&lt;/p&gt;
&lt;h2&gt;其他說明&lt;/h2&gt;
&lt;p&gt;假設當使用者啟動近端隨身碟中的 start.bat 時, Fossil SCM Server 在 https://192.168.1.68 中啟動 vcp.fossil 倉儲, 接下來則要利用:&lt;/p&gt;
&lt;p&gt;fossil clone https://yen@192.168.1.68 vcp.fossil&lt;/p&gt;
&lt;p&gt;將 URL 中的倉儲克隆到近端的 vcp.fossil 倉儲檔中.&lt;/p&gt;
&lt;p&gt;接著則要在近端 vcp.fossil 所在目錄下, 建立一個名稱為 wd 的工作目錄.&lt;/p&gt;
&lt;p&gt;以 cd wd 進入工作目錄之後, 可以利用 fossil open ./../vcp.fossil 將倉儲解開.&lt;/p&gt;
&lt;p&gt;因為當使用者在不指定用戶的情況下進行 fossil clone, Fossil SCM 會以內定的 autosync 用戶作為指定使用者, 同時會在完成克隆後顯示在命令列中.&lt;/p&gt;
&lt;p&gt;接下來, 使用者將上述兩個 .c 與 兩個 .py 程式, 從原本的儲存位置, 複製到 wd 工作目錄中.&lt;/p&gt;
&lt;p&gt;意即原本 vcp.fossil 倉儲中並沒有任何納管的資料內容, 透過操作系統的檔案複製, 將四個程式檔案放入工作目錄後, 必須利用 fossil add . 納入所有的改版內容.&lt;/p&gt;
&lt;p&gt;接下來則要進行倉儲改版提交與推送的流程.&lt;/p&gt;
&lt;p&gt;所謂的改版提交, 表示要在倉儲資料庫中對改版內容進行"註記", 也就是改版標記, 並且輸入對應的提交訊息, 以便讓協同者, 可以透過提交註記, 分辨每一次的改版大要.&lt;/p&gt;
&lt;p&gt;由於 Fossil SCM 的設定中, 內建 autosync 為 on, 也就是改版的提交會自動與推送同步進行, 假如接下來, 使用者採用 fossil clone 時系統內建的使用者, 則只要完成改版提交, Fossil 會自動進行推送的動作.&lt;/p&gt;
&lt;p&gt;但是, 假如使用者要使用其他俱備提交推送權限的帳號執行後續的動作, 則需要利用:&lt;/p&gt;
&lt;p&gt;fossil remote-url off&lt;/p&gt;
&lt;p&gt;抹除 autosync 為 on 所綁定的使用者帳號, 但是提交之後 ,必須手動進行推送.&lt;/p&gt;
&lt;p&gt;Fossil SCM 提交:&lt;/p&gt;
&lt;p&gt;fossil commit -m "add four demo program files"&lt;/p&gt;
&lt;p&gt;Fossil SCM 推送&lt;/p&gt;
&lt;p&gt;fossil push https://username@192.168.1.68&lt;/p&gt;
&lt;p&gt;接著輸入與 username 對應的密碼, 即可完成改版推送的流程.&lt;/p&gt;
&lt;p&gt;完成之後的結果 &lt;a href="https://mde2a1.kmol.info/dir?ci=tip"&gt;https://mde2a1.kmol.info/dir?ci=tip&lt;/a&gt;&lt;/p&gt;</summary><category term="Fossil"></category><category term="w5"></category></entry><entry><title>W3 啟動區網中的 Fossil SCM server</title><link href="./fossil-scm-server.html" rel="alternate"></link><published>2017-02-08T11:00:00+08:00</published><updated>2017-02-08T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-02-08:./fossil-scm-server.html</id><summary type="html">&lt;p&gt;利用 fossil.exe 可以建立倉儲檔案, 也可以配合 stunnel, 採用批次檔自動建立 stunnel.conf 的方式, 讓 Fossil SCM 伺服器能在區域網路中, 以 https 模式連接.&lt;/p&gt;


&lt;h2&gt;修改 start.bat&lt;/h2&gt;
&lt;p&gt;當使用者&lt;a href="http://service.mde.tw/public/tiny2017_50MB.7z"&gt;下載&lt;/a&gt;可攜程式系統後, 可以使用手動方式設定 stunnel/config/stunnel.conf 檔案, 順利使用 tmp/fossil_repo 目錄啟動 fossil server, 自第3週起, 我們則要使用批次檔的指令, 以自動的方式取得電腦連外 IP 位址, 並且自動設定 stunnel.conf, 自動以 chrome 連接到本機所啟動的 fossil SCM server.&lt;/p&gt;
&lt;p&gt;修改後的 start.bat 如下, 所啟動的 fossil server 位於 y:\tmp\fossil_repo\vcp.fossil 倉儲:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
REM tiny2017 主要針對初學 Python3 與 C 學員所建立
REM 近端使用 fossil 管理資料版本, 並且定時轉為 git 格式後上傳到 github
@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\python-3.5.3-embed-amd64
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\wscite\SciTE.exe
REM for fossil https 連線設定
set HTTPS=on
REM 指令搜尋路徑設定
set path1=%PATH%;%Disk%:;%Disk%:\python-3.5.3-embed-amd64;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\python-3.5.3-embed-amd64\Scripts;%Disk%:\portablegit\bin;
set path2=c:\Windows\Microsoft.NET\Framework\v3.5;%Disk%:\python-3.5.3-embed-amd64\Lib\site-packages;
set path3="C:\Program Files (x86)\Google\Chrome\Application"
path=%path%;%path1%;%path2%;%path3%
start /MIN %Disk%:\wscite\SciTE.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
REM 啟動 Leo 編輯器
REM %Disk%:\Miniconda3\python.exe %Disk%:\apps\launchLeo.py
REM 啟動 stunnel
start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo\vcp.fossil
REM 取得電腦 IP, 然後設定 %Disk%:/stunnel/config/stunnel.conf
for /f "delims=[] tokens=2" %%a in ('ping -4 -n 1 %ComputerName% ^| findstr [') do set NetworkIP=%%a
REM echo Network IP: %NetworkIP%
REM Saved in %Disk%:\stunnel\config\stunnel.conf
@echo off
REM 建立 stunnel.conf
@echo [https] &gt; %Disk%:\stunnel\config\stunnel.conf
REM 附加資料
@echo accept = %NetworkIP%:443 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo connect = 127.0.0.1:8080 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo TIMEOUTclose = 0 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo cert = %Disk%:\stunnel\config\localhost.crt &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo key = %Disk%:\stunnel\config\localhost.key &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
REM 啟動 stunnel
start /MIN stunnel.exe
REM set proxy
REG IMPORT setup_proxy.reg
REM 以 chrome 連線到 https://%NetworkIP%:443
REM chrome  --proxy-server="140.130.17.17:3128" --proxy-bypass-list="192.168.1.*;*.edu.tw" https://%NetworkIP%
chrome https://%NetworkIP% http://mde.tw https://mde2a1.kmol.info https://mde2a2.kmol.info https://vimeo.com/user24079973 http://mde.tw/2017springcd/blog/ http://mde.tw/2017springwcm/blog/ http://mde.tw/2017springvcp/blog/ http://service.mde.tw
Exit
&lt;/pre&gt;

&lt;p&gt;setup_proxy.reg 設定  Windows proxy 組態檔案:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings] 
"MigrateProxy"=dword:00000001 
"ProxyEnable"=dword:00000001 
"ProxyHttp1.1"=dword:00000000 
"ProxyServer"="http://140.130.17.17:3128" 
"ProxyOverride"="192.168.1.*;*.edu.tw"
&lt;/pre&gt;

&lt;p&gt;disable_proxy.reg 去除 Windows proxy 設定組態檔案:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings] 
"ProxyEnable"=dword:00000000
&lt;/pre&gt;

&lt;p&gt;與上述設定對應的 stop.bat:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM SciTE.exe /F
REM 關閉 python
taskkill /IM python.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM disable proxy
%Disk%:
REG IMPORT disable_proxy.reg
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM taskkill /IM mingw32 /F
EXIT
&lt;/pre&gt;

&lt;h2&gt;建立 vcp.fossil&lt;/h2&gt;
&lt;p&gt;使用 fossil.exe 建立 y:\tmp\fossil_repo\vcp.fossil&lt;/p&gt;
&lt;p&gt;首先確定使用可攜系統啟動的 dos command, 進入 y:\&lt;/p&gt;
&lt;p&gt;cd tmp&lt;/p&gt;
&lt;p&gt;cd fossil_repo&lt;/p&gt;
&lt;p&gt;進入 y:\tmp\fossil_repo 目錄後,  以 fossil init 建立 vcp.fossil 倉儲檔案&lt;/p&gt;
&lt;p&gt;fossil init vcp.fossil&lt;/p&gt;
&lt;p&gt;建立 vcp.fossil, 系統會顯示管理者的帳號與密碼, 必須紀錄起來, 例如: user/1234567&lt;/p&gt;
&lt;p&gt;之後再確認上述 start.bat 已經新增 chrome.exe 的執行目錄為 path3, 並納入 path 指令中, 並且已經利用:&lt;/p&gt;
&lt;p&gt;start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo\vcp.fossil&lt;/p&gt;
&lt;p&gt;以 fossil server 指令啟動 vcp.fossil&lt;/p&gt;
&lt;h2&gt;以帳號密碼登入 fossil SCM server&lt;/h2&gt;
&lt;p&gt;當完成 vcp.fossil 建立, 且重新啟動 start.bat 之後, Chrome 會自動連接到本機的 fossil SCM server, 此時要確認連結至廣域網路的 proxy 設定, 已經將 192.168.1.* 內部網路區段設為例外, 不使用 proxy 連線.&lt;/p&gt;
&lt;h2&gt;fossil SCM 管理&lt;/h2&gt;
&lt;p&gt;更換登入密碼:&lt;/p&gt;
&lt;p&gt;Admin - Users&lt;/p&gt;
&lt;p&gt;更改網站名稱:&lt;/p&gt;
&lt;p&gt;Admin - Configuration&lt;/p&gt;
&lt;p&gt;設定時區:&lt;/p&gt;
&lt;p&gt;Admin - Timeline - Use Universal Coordinated Time (UTC)&lt;/p&gt;
&lt;p&gt;允許使用者註冊:&lt;/p&gt;
&lt;p&gt;Admin - Access -  Allow users to register themselves&lt;/p&gt;
&lt;p&gt;查詢 vcp.fossil 倉儲中的用戶帳號設定:&lt;/p&gt;
&lt;p&gt;fossil sql -R vcp.fossil "select login, pw from user;"&lt;/p&gt;
&lt;h2&gt;fossil SCM 基本操作&lt;/h2&gt;
&lt;p&gt;假設  vcp.fossil 位於 y:\tmp\fossil_repo 目錄, 而希望利用 y:\tmp\fossil_wd 目錄作為 working directory.&lt;/p&gt;
&lt;p&gt;cd y:\tmp\fossil_wd&lt;/p&gt;
&lt;p&gt;進入工作目錄&lt;/p&gt;
&lt;p&gt;fossil open ./../fossil_repo/vcp.fossil&lt;/p&gt;
&lt;p&gt;在工作目錄中開啟位於 fossil_repo 目錄下的 vcp.fossil 倉儲檔案&lt;/p&gt;
&lt;p&gt;利用  SciTE 在 y:\tmp\fossil_wd 目錄中新增 for_printf1.c 檔案, 以 tools - go 確認可以執行後, 希望納入 vcp.fossil 倉儲中進行版次管理.&lt;/p&gt;
&lt;p&gt;fossil add .&lt;/p&gt;
&lt;p&gt;表示要在隨後, 以 recursive 方式納入本目錄中所有的改版變更.&lt;/p&gt;
&lt;p&gt;確定 for_printf1.c 改版完成後, 準備提交.&lt;/p&gt;
&lt;p&gt;fossil commit -m "add for_printf1.c"&lt;/p&gt;
&lt;p&gt;利用 vcp.fossil 倉儲的網際介面檢查是否已經完成改版提交.&lt;/p&gt;
&lt;p&gt;若要刪除 y:\tmp\fossil_wd 目錄中的 &lt;em&gt;FOSSIL&lt;/em&gt; 目錄, 則使用:&lt;/p&gt;
&lt;p&gt;fossil close&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fossil-scm.org/xfer/help/push"&gt;fossil push&lt;/a&gt;&lt;/p&gt;</summary><category term="Fossil"></category></entry><entry><title>網際 Python3 程式環境</title><link href="./web-based-python.html" rel="alternate"></link><published>2017-02-08T11:00:00+08:00</published><updated>2017-02-08T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-02-08:./web-based-python.html</id><summary type="html">&lt;p&gt;利用 &lt;a href="https://brython.info/"&gt;Brython&lt;/a&gt; 建立可以直接在瀏覽器中執行簡單 Python3 程式的環境.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;!-- &lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt; --&gt;

&lt;!-- 為了讓 import script1 可以正確運行, 停留在 Brython 3.2.9 版 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/3.2.9/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下可利用 Brython 環境執行 Python3 程式 --&gt;

&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;

&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
container1 = document['container1']
&lt;/script&gt;

&lt;h3&gt;利用伺服器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;Jupyterhub: &lt;a href="https://8888.kmol.info:9443"&gt;https://8888.kmol.info:9443&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇"Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_ver_and_kw"].bind("click", get_ver_and_kw)

def get_circle_area(e):
    data = open("./../python_ex/circle_area.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_circle_area"].bind("click", get_circle_area)

def get_scalene_area(e):
    data = open("./../python_ex/scalene_area.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_scalene_area"].bind("click", get_scalene_area)

def get_equilateral_area(e):
    data = open("./../python_ex/equilateral_area.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_equilateral_area"].bind("click", get_equilateral_area)
&lt;/script&gt;

&lt;p&gt;&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="get_circle_area"&gt;circle_area.py&lt;/button&gt;&lt;button id="get_scalene_area"&gt;scalene_area.py&lt;/button&gt;&lt;button id="get_equilateral_area"&gt;equilateral_area.py&lt;/button&gt;&lt;/p&gt;</summary><category term="brython"></category></entry><entry><title>C dll 程式庫與 Python3</title><link href="./c-dll-and-python3.html" rel="alternate"></link><published>2017-01-18T11:00:00+08:00</published><updated>2017-01-18T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-01-18:./c-dll-and-python3.html</id><summary type="html">&lt;p&gt;利用 &lt;a href="http://bellard.org/tcc/"&gt;Tiny C compiler&lt;/a&gt; 編譯 Windows 10 64 位元 dll 動態連結庫, 並由 Python 程式呼叫執行.&lt;/p&gt;


&lt;h2&gt;利用 Tiny C 編譯 Tiny C&lt;/h2&gt;
&lt;p&gt;從 &lt;a href="http://download.savannah.gnu.org/releases/tinycc/"&gt;http://download.savannah.gnu.org/releases/tinycc/&lt;/a&gt; &lt;a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.26-win64-bin.zip"&gt;下載&lt;/a&gt; Win64 C 程式編譯器, 並&lt;a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.26.tar.bz2"&gt;下載&lt;/a&gt; Tiny C compiler 0.9.26 版程式原始碼. 利用下列批次檔案進行編譯.&lt;/p&gt;
&lt;p&gt;compileTCC.bat 檔案內容:&lt;/p&gt;
&lt;pre class="brush: shell"&gt;
echo Use TCC to compile TCC

echo Set CC=tcc

set CC=tcc
set target=-DTCC_TARGET_PE -DTCC_TARGET_X86_64
set P=64

echo tools: tiny_impdef.exe, tiny_libmaker.exe

%CC% %target% win32/tools/tiny_impdef.c -o tiny_impdef.exe
%CC% %target% win32/tools/tiny_libmaker.c -o tiny_libmaker.exe

echo Compile libtcc.dll

if not exist libtcc\nul mkdir libtcc
%CC% %target% -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE libtcc.c -o libtcc.dll
tiny_impdef libtcc.dll -o libtcc/libtcc.def

echo Compile tc.exe

%CC% %target% tcc.c -o tc.exe -ltcc -Llibtcc

echo Compile libcc1.a

%CC% %target% -c lib/libtcc1.c
%CC% %target% -c win32/lib/crt1.c
%CC% %target% -c win32/lib/wincrt1.c
%CC% %target% -c win32/lib/dllcrt1.c
%CC% %target% -c win32/lib/dllmain.c
%CC% %target% -c win32/lib/chkstk.S
%CC% %target% -c lib/alloca86_64.S
tiny_libmaker lib/libtcc1.a libtcc1.o alloca86_64.o crt1.o wincrt1.o dllcrt1.o dllmain.o chkstk.o
&lt;/pre&gt;

&lt;h2&gt;編譯 dll 動態程式庫&lt;/h2&gt;
&lt;p&gt;首先, 建立一個 multiply.c 程式:&lt;/p&gt;
&lt;pre class="brush: c"&gt;
#include &amp;lt;stdio.h&amp;gt;

int multiply(int, int);

__declspec(dllexport) int
multiply(int num1, int num2)
{
return num1 * num2;
}
&lt;/pre&gt;

&lt;p&gt;利用下列指令, 將 multiply.c 編譯為動態連結庫 myltiply.dll&lt;/p&gt;
&lt;p&gt;tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply.c -o multiply.dll&lt;/p&gt;
&lt;p&gt;接著利用下列 Python3 程式, 透過 ctypes 模組導入 multiply.dll, 並且執行動態連結程式庫中的 multiply() 函式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import ctypes

lib = ctypes.CDLL('multiply.dll')
result = lib.multiply(3, 2)
print(result)
&lt;/pre&gt;</summary><category term="tinyc"></category><category term="dll"></category><category term="ctypes"></category><category term="w12"></category></entry><entry><title>為什麼要學習計算機程式?</title><link href="./why-computer-programming.html" rel="alternate"></link><published>2017-01-18T11:00:00+08:00</published><updated>2017-01-18T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-01-18:./why-computer-programming.html</id><summary type="html">&lt;p&gt;車輛工程系學習計算機程式做什麼?&lt;/p&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(電動汽車世代來臨) - 隨著現代汽車傳動控制的電子化、電機化、網路化與智能化, 計算機程式相關技術在汽車領域的應用將會愈來愈重要.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(電腦輔助設計普及) - 現代汽車的協同設計研發大量採用 Computer Aided Design (CAD, 利用電腦實現設計的具像表達, 直接建構模擬系統或 API 延伸), Finite Element Analysis (利用電腦實現設計的強度與碰撞分析), Data Acquisition (數據擷取), and Numerical Analysis (數值分析). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(虛擬與擴增實境整合) - 現代汽車行路對於網路化與數位化地圖與即時路況資料的依賴愈來愈多, 這些資料需要透過許多電腦程式的整合運行.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python 為解譯式、泛用型程式語言&lt;/p&gt;
&lt;p&gt;Python 可以作為互動式計算機&lt;/p&gt;
&lt;p&gt;Python 語法可以透過 Brython, 直接在瀏覽器中執行&lt;/p&gt;
&lt;p&gt;Python 可以直接在 Jupyterlab 環境中執行&lt;/p&gt;
&lt;p&gt;計算機程式抽象層級:&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/reichart-abstraction-diagram.png" width='600' /&gt;&lt;/p&gt;
&lt;p&gt;Controller Area Network (CAN)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hardbyte/python-can"&gt;https://github.com/hardbyte/python-can&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/canbus_network.jpg" width='600' /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://spectrum.ieee.org/automaton/robotics/artificial-intelligence/how-google-self-driving-car-works"&gt;http://spectrum.ieee.org/automaton/robotics/artificial-intelligence/how-google-self-driving-car-works&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YXylqtEQ0tk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2011)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7Yd9Ij0INX0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2013)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yPCt7mu-pb0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2013)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nL-CqMenOqQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2013)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/czLI3oLDe8M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2014)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wPHq4LYNmRY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2015)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/3dXQxSI3XDY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2016)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/GE32Vvt-flM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2017)&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5izIed9nGdo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;(2017)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.teamtreehouse.com/havent-started-programming-yet"&gt;http://blog.teamtreehouse.com/havent-started-programming-yet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;if computers are at all a part of your life, then learning to program is going to improve your life.&lt;/p&gt;
&lt;p&gt;Learning to program can make you more productive, efficient and effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://theconversation.com/why-everyone-should-have-to-learn-computer-programming-62328"&gt;http://theconversation.com/why-everyone-should-have-to-learn-computer-programming-62328&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;數位化系統 (電腦) 無所不在, 希望高效且客製化運用這些系統, 就必須學習與電腦溝通&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.codementor.io/learn-programming/beginner-programming-language-job-salary-community"&gt;https://www.codementor.io/learn-programming/beginner-programming-language-job-salary-community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-u-s-universities/fulltext"&gt;http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-u-s-universities/fulltext&lt;/a&gt;&lt;/p&gt;</summary><category term="programming"></category><category term="w2"></category></entry><entry><title>2017Spring 車輛工程系計算機程式</title><link href="./2017spring-ve-cp.html" rel="alternate"></link><published>2017-01-08T11:00:00+08:00</published><updated>2017-01-08T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-01-08:./2017spring-ve-cp.html</id><summary type="html">&lt;p&gt;為了運行速度, 我們學 C; 為了開發效率, 我們學 Python, 想要同時得到運行速度與開發效率, 我們學習 C + Python! 更具體的說: 在 2017Spring 的計算機程式課程中, 我們學習簡單的 ANSI C 與 Python3.&lt;/p&gt;


&lt;p&gt;2017 Spring 車輛工程系計算機程式 (五) 18:30-20:00上課日期:&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w1-2/24&lt;/span&gt; - 請每人準備一個隨身碟, &lt;span style="background-color: #55ff55"&gt;&lt;a href="http://service.mde.tw/public/tiny2017_50MB.7z"&gt;下載&lt;/a&gt;&lt;/span&gt;可攜程式系統 (50MB) (或從倉儲中&lt;a href="./../data/tiny2017.7z"&gt;下載&lt;/a&gt;), 從校園網路&lt;span style="background-color: #55ff55"&gt;&lt;a href="http://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;下載 Lean Python.pdf&lt;/a&gt;&lt;/span&gt; (7MB, 英文 100 頁), &lt;span style="background-color: #55ff55"&gt;&lt;a href="http://service.mde.tw/public/jsliu_c_programming.pdf"&gt;下載 C 程式語言基礎.pdf&lt;/a&gt;&lt;/span&gt; (194 KB, 中文 94 頁) (或從倉儲中&lt;a href="./../data/jsliu_c_programming.pdf"&gt;下載&lt;/a&gt;), &lt;span style="background-color: #55ff55"&gt;&lt;a href="http://service.mde.tw/public/Programming-in-ANSI-C.pdf"&gt;下載 Programming in ANSI C.pdf&lt;/a&gt;&lt;/span&gt; (或從倉儲中&lt;a href="./../data/Programming-in-ANSI-C.pdf"&gt;下載&lt;/a&gt;) (600KB, 英文 258 頁), 了解如何啟動系統, 了解如何關閉系統, 了解如何執行 C 程式, 了解如何執行 Python3 程式, 了解為何要學習 C 與 Python3 程式語言. &lt;button onClick="lity('https://player.vimeo.com/video/205538763')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; W1影片&lt;/button&gt; &lt;button onClick="lity('https://player.vimeo.com/video/205537163')"&gt;&lt;span class="glyphicon glyphicon-facetime-video"&gt;&lt;/span&gt; ShareX 簡介&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w2-3/3&lt;/span&gt; - ANSI C: Part A Section 1 - C 程式歷史與架構 | Python3: Ch1 Getting Started, 了解 Python 解譯器互動模式, 利用 dir() 列出物件屬性, 基本函式定義, 註解與程式碼縮排&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w3-3/10&lt;/span&gt; - ANSI C: Part A Section 2 - C 常數與變數 | Python3: Ch2 Python Objects, 了解 Python 物件型別與基本用法&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w4-3/17&lt;/span&gt; - 課程內容回顧與練習, 分別利用 C 與 Python3 寫一個華氏與攝氏溫度轉換程式, 並比較兩者的差異.&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w5-3/24&lt;/span&gt; - ANSI C: Part A Section 3 - 變數賦值與表達式 | Python3: Ch3 Program Structure, 了解 Python 程式架構&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w6-3/31&lt;/span&gt;(放假)&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w7-4/7&lt;/span&gt; - 課程內容回顧與練習, 簡單介紹能在瀏覽器中執行的 &lt;a href="https://brython.info/"&gt;Brython&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w8-4/14&lt;/span&gt; - ANSI C: Part A Section 4, 5, 6 | Python3: Ch4 - 6, 分組整理出一份漂亮的計算機程式初學者教材?如何整理?如何呈現?從 &lt;a href="http://service.mde.tw/public/tiny2017_50MB.7z"&gt;tiny2017_50MB&lt;/a&gt; 進展到 &lt;a href="http://service.mde.tw/public/tiny2017_1GB.7z"&gt;tiny2017_1GB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w9-4/21&lt;/span&gt; (期中考週) - 課程回顧與期中簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w10-4/28&lt;/span&gt; ANSI C： Part A Section 1-6 再回顧 | Python3: Ch 1-6, 從 C、Python3 到 Brython, 導入 mini2017 之後, 帶出 Github 與 github pages, 我們學到什麼?&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w11-5/5&lt;/span&gt; 檢討分組期中報告與期中簡報, 我們學計算機程式的初衷為了什麼? 利用 Leo Editor、Pelican Blog、Reveal.js 與 Ethercalc 替換 MS Words、PowerPoint 與 Excel?&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w12-5/12&lt;/span&gt; - 是的, 我們確實隱瞞了許多複雜的細節, 了解如何利用 &lt;a href="http://bellard.org/tcc/"&gt;Tiny C compiler&lt;/a&gt; 編譯自己, 了解如何將 C 程式, 以 Tiny C 編譯為動態程式庫, 然後從 Python3 程式中進行呼叫.&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w13-5/19&lt;/span&gt; - 分組練習, 準備期末專題報告與簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w14-5/26&lt;/span&gt; - 分組練習, 準備期末專題報告與簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w15-6/2&lt;/span&gt; - 分組練習, 準備期末專題報告與簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w16-6/9&lt;/span&gt; - 分組練習, 準備期末專題報告與簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w17-6/16&lt;/span&gt; - 分組練習, 準備期末專題報告與簡報&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00"&gt;w18-6/23&lt;/span&gt; (期末考週), 分組期末簡報&lt;/p&gt;
&lt;p&gt;參考書: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-3-642-23303-6"&gt;Programming for Engineers - A Foundational Approach to Learning C and Matlab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-1-4302-0657-6"&gt;Beginning C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-1-4302-4777-7"&gt;Beginning C for Arduino&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-1-4302-6500-9"&gt;C Quick Syntax Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-1-4842-0241-8"&gt;Python Recipes Handbook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://link.springer.com/book/10.1007/978-981-10-3277-6"&gt;Programming with Python&lt;/a&gt;&lt;/p&gt;</summary><category term="syllabus"></category><category term="w1"></category></entry></feed>